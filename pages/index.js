import Head from 'next/head'
import {
  ConnectButton
} from '@rainbow-me/rainbowkit';
import { useRef, useState } from 'react';
import Select from 'react-select'
import { ethers, providers } from 'ethers';
import Image from 'next/image';
import Avatar, { genConfig } from 'react-nice-avatar'


import { Dropdown } from 'semantic-ui-react'
import { NumericFormat } from 'react-number-format';
import { useConnect, useNetwork, useBalance, useAccount, chain } from 'wagmi';

// Dark blue #2222ff
// Light green #20cc9e
// Light purple #372963


const Index = () => {
  // Page Views 
  const [action, setAction] = useState('send');
  const [subAction, setSubAction] = useState('send');
  // send subaction state
  const [payment, setPayment] = useState(undefined);
  const [addressReciever, setAddressReciever] = useState('');
  const [addressError, setAddressError] = useState(false);

  // wagmi hooks
  const { address, isConnecting, isDisconnected } = useAccount();
  const connection = useNetwork();

  // switches between send and receive
  const switchAction = (_action) => {
    setAction(_action);
  }
  // Available Payment Methods
  const options = [
    { value: 'Single ', label: ' Single Transaction' },
    { value: 'Multiple', label: 'Multiple Transactions' },
  ];
  // Avatar config at config.current;
  const config = useRef(genConfig());
  // Tokens 
  const getTokenAddress = (token) => {
    if (connection.chain?.nativeCurrency.symbol == 'ETH') {
      if (token == 'native') {
        return { address: undefined, tokenName: connection.chain?.nativeCurrency.symbol, balance: nativeBalance.data?.formatted }
      }
      if (token == 'DAI') {
        return { address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', tokenName: 'DAI', balance: tokenBalance.data?.formatted }
      }
      else if (token == 'USDC') {
        return { address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', tokenName: 'USDC', balance: tokenBalance.data?.formatted }
      }
      else if (token == 'USDT') {
        return { address: '0xdAC17F958D2ee523a2206206994597C13D831ec7', tokenName: 'USDT', balance: tokenBalance.data?.formatted }
      }
      else if (token == 'WBTC') {
        return { address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', tokenName: 'WBTC', balance: tokenBalance.data?.formatted }
      }
    }
  }
  const TokensAvailable = [
    {
      key: connection.chain?.nativeCurrency.name,
      text: connection.chain?.nativeCurrency.symbol,
      value: getTokenAddress('native'),
      image: {
        avatar: true,
        src: `${connection.chain?.nativeCurrency.symbol}.svg`
      }
    },
    {
      key: "DAI",
      text: `DAI`,
      value: getTokenAddress('DAI'),
      image: {
        avatar: true,
        src: "DAI.svg"
      }
    },
    {
      key: "USDC",
      text: "USDC",
      value: getTokenAddress('USDC'),
      image: {
        avatar: true,
        src: "USDC.svg"
      }
    },
    {
      key: "USDT",
      text: "USDT",
      value: getTokenAddress('USDT'),
      image: {
        avatar: true,
        src: "USDT.svg"
      }
    },
    {
      key: "WBTC",
      text: "WBTC",
      value: getTokenAddress('WBTC'),
      image: {
        avatar: true,
        src: "WBTC.svg"
      }
    },
  ];
  // transaction  state 
  const [token, setToken] = useState(TokensAvailable[0].value);
  const [sendAmount, setSendAmount] = useState('');
  const nativeBalance = useBalance({
    addressOrName: address,
  });

  const tokenBalance = useBalance({
    addressOrName: address,
    token: token?.address
  });

  return (

    <div className={`h-full min-h-screen w-full grid grid-cols-[repeat(7,1fr)] grid-rows-[100px,100px,auto,auto,100px] bg-[#100d23]  `}>
      <Head>
        <title>Paylock</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <span className={`justify-self-end self-center col-start-1 col-end-8 mx-4 bg-[#372963]  `}>
        <ConnectButton />
      </span>

      <span className={`justify-self-center self-center col-start-1 col-end-8 mx-4  `}>
        <span onClick={() => { switchAction('send') }} className={`shineEffect cursor-pointer font-extralight text-white p-4 px-8 bg-[#131341] rounded ${action == "send" ? ` bg-[#2222ff]  ` : `  text-[#F6F6F6]   `}`}>
          Send
        </span>
        <span onClick={() => { switchAction('receive') }} className={` shineEffect ml-2 cursor-pointer font-extralight text-white p-4 px-8 bg-[#131341] rounded ${action == "receive" ? ` bg-[#2222ff] ` : ` text-[#F6F6F6]`}  `}>
          Receive
        </span>
      </span>

      {action == 'send' ?

        subAction == 'send' ?
          <span className={`col-start-1 col-end-8 row-start-3 row-end-4 mx-4 p-4 rounded grid grid-rows-[30px,30px,30px,50px,30px,50px,30px,80px] grid-cols-1 border-black border-[2px] bg-[#F6F6F6] `}>

            <span className={`text-[#2222ff] text-xl `}>Send a New Payment </span>
            <span className={`text-[#372963] text-sm `}>Select payment method and deposit tokens into the contract </span>

            <span className={`text-[#2222ff] font-extralight text-sm mt-4 self-start`}> Payment Method </span>

            <Select
              options={options}
              className={`mt-4 max-w-[400px]`}
              onChange={(change) => {
                setPayment(change)
              }}
            />
            <span className={`text-[#2222ff] font-extralight text-sm mt-4 self-start`}> Target Address </span>
            <input
              name="name"
              type="text"
              className={`mt-4 max-w-[400px]`}

              onChange={(change) => {
                const isAddress = ethers.utils.isAddress(change.target.value);
                if (!isAddress) {
                  setAddressError(true);
                }
                else {
                  setAddressError(false);
                  setAddressReciever(change.target.value)
                }

              }}
            />

            <span className={`flex mt-2  `}>
              {addressError &&
                <>
                  <Image
                    width={20}
                    height={20}
                    className={`inline `}
                    alt={'error'}
                    src={'/alert_diamond.svg'}
                  />
                  <span className={`text-[#372963] text-sm align-super ml-2 font-semibold`}>Please insert a valid address.</span>
                </>
              }
            </span>

            <button onClick={() => {
              console.log(payment)
              if (!addressError && addressReciever != '' && payment) {
                setSubAction('deposit')
              }
              else {
                setAddressError(true);
                console.log('wrong address or empty or not selected option')
              }
            }} className={` cursor-pointer font-extralight text-white p-2 px-8 bg-[#2222ff] rounded justify-self-start self-center `}>
              Next
            </button>
          </span>
          :
          <>
            <span className={`col-start-1 col-end-8 row-start-3 row-end-4 mx-4 p-4 rounded grid grid-rows-[30px,30px,30px,30px,50px,30px,50px] grid-cols-1 border-black border-[2px] bg-[#F6F6F6] `}>
              <span className={`flex`} >
                <svg onClick={() => {
                  setSubAction('send');
                  setAddressReciever('');
                }} className={`hover:cursor-pointer hover:rounded-3xl bg-slate-500`} width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M5 12L4.29289 11.2929L3.58579 12L4.29289 12.7071L5 12ZM17 13C17.5523 13 18 12.5523 18 12C18 11.4477 17.5523 11 17 11V13ZM8.29289 7.29289L4.29289 11.2929L5.70711 12.7071L9.70711 8.70711L8.29289 7.29289ZM4.29289 12.7071L8.29289 16.7071L9.70711 15.2929L5.70711 11.2929L4.29289 12.7071ZM5 13H17V11H5V13Z" fill="#CCD2E3" />
                </svg>

                <span className={`text-[#372963] text-sm ml-2 self-center`}> Edit transaction</span>


              </span>
              <span className={`text-[#2222ff] text-xl   `}>Send a New Payment </span>
              <span className={`text-[#372963] text-sm  `}>Select payment method and deposit tokens into the contract </span>
              <span className={`text-[#2222ff] font-extralight text-sm mt-4 self-start`}> Payment Method </span>
              <Select
                defaultValue={payment}
                isDisabled={true} className={`mt-4 max-w-[400px] mr-14`}
              />

              <span className={`text-[#2222ff] font-extralight text-sm mt-4 self-start`}> Target Address </span>

              <span className={`flex border-[1px] hover:border-[#2222ff] border-[grey] max-w-[400px] rounded mt-2  mr-14 `}>
                <Avatar className="w-8 h-8 inline self-center" {...config.current} />
                <input
                  name="name"
                  type="text"
                  className={`ml-2 max-w-[400px] self-center`}
                  value={addressReciever}
                  disabled={true}
                />
              </span>

            </span>

            <span className={`col-start-1 col-end-8 row-start-4 row-end-5 mx-4 p-4 rounded grid grid-rows-[50px,30px,50px,30px,30px,50px,50px,50px] grid-cols-1 border-black border-[2px] bg-[#F6F6F6] `}>

              <span className={`text-[#2222ff] text-xl mt-2`}>Transaction Details </span>

              <span className={`flex self-center`}>

                <span className={`text-[#2222ff] font-extralight text-sm self-center mr-4`}>
                  Select token
                </span>
              </span>
              <span className={`max-w-[400px] self-center`}>
                <Dropdown
                  options={TokensAvailable}
                  defaultValue={token}
                  onChange={(event, data) => {
                    setToken(data.value)
                  }}
                />
              </span>
              <span className={`flex self-center`}>
                <span className={`text-[#2222ff] font-extralight text-sm self-center mr-4`}>
                  Amount
                </span>
                <span className={`text-[#2222ff] font-extralight text-sm self-center ml-4`}>
                  Balance:
                </span>
                <span className={`text-[#2222ff] font-bold text-sm ml-4 self-center`}>

                  {token.address == undefined ?

                    nativeBalance.data?.formatted
                    :
                    tokenBalance.data?.formatted
                  }
                </span>
                <span className={`text-[#2222ff] font-bold text-sm ml-2 self-center`}>
                  {token.tokenName}
                </span>
              </span>

              <NumericFormat
                className={` mr-14 max-w-[400px]`}
                allowNegative={false}
                thousandSeparator
                onValueChange={(values, sourceInfo) => {
                  console.log(values.value);
                  setSendAmount(values.value);
                }}
              />

              <span className={`flex self-center`}>
                {sendAmount != '' && token.balance > 0 &&
                  <span>
                    Send Amount
                  </span>
                }
              </span>

              <span className={`flex self-center`}>
                <span className={`text-[#2222ff] font-extralight text-sm self-center mr-4`}>
                  Network
                </span>
                <Image
                  className={`ml-2`}
                  alt='token'
                  src={`/${connection.chain.nativeCurrency.symbol}.svg`}
                  width={30}
                  height={30}
                />
                <span className={`text-[#2222ff] font-bold text-sm ml-4 self-center`}>
                  {connection.chain.name}
                </span>
              </span>

              <span>

                <button onClick={() => {
                  if (!addressError && payment) {
                    setSubAction('deposit')
                  }
                  else {
                    console.log('wrong address or not slected option')
                  }
                }} className={`ml-2  cursor-pointer font-extralight text-white p-2 px-8 bg-[#2222ff] rounded justify-self-start self-center `}>
                  Create Transaction
                </button>
              </span>
            </span>
          </>
        :
        // Receive
        <span className={`col-start-1 col-end-8 row-start-3 row-end-4 mx-4 p-4 rounded grid grid-rows-[30px,30px,30px,50px,30px,50px,30px,80px] grid-cols-1 border-black border-[2px] bg-[#F6F6F6] `}>

          <span className={`text-[#2222ff] text-xl m-4  `}>Receive payment </span>
          <span className={`text-[#372963] text-sm m-4  `}>Redeem payments   </span>
        </span>
      }

    </div>
  )
};
export default Index


